#!/bin/bash

# ๐ ุณูุฑููพุช ุงูุฅุนุฏุงุฏ ุงูุณุฑูุน ูุจูุช ุงูุงุณุชุถุงูุฉ
# Quick Setup Script for Hosting Bot

set -e

# ุงูุฃููุงู ููุฅุฎุฑุงุฌ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # ุจุฏูู ููู

# ุฏุงูุฉ ุทุจุงุนุฉ ููููุฉ
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# ูุญุต ุฅุฐุง ูุงู ุงููุธุงู Ubuntu/Debian
check_system() {
    if [[ ! -f /etc/debian_version ]]; then
        print_error "ูุฐุง ุงูุณูุฑููพุช ูุฏุนู Ubuntu/Debian ููุท"
        exit 1
    fi
    
    print_success "ุงููุธุงู ูุชูุงูู"
}

# ูุญุต ุตูุงุญูุงุช ุงููุณุชุฎุฏู
check_permissions() {
    if [[ $EUID -eq 0 ]]; then
        print_error "ูุง ุชุดุบู ูุฐุง ุงูุณูุฑููพุช ูู root"
        print_warning "ุงุณุชุฎุฏู ูุณุชุฎุฏู ุนุงุฏู ูุน sudo"
        exit 1
    fi
    
    # ูุญุต ุฅุฐุง ูุงู sudo ูุชุงุญุงู
    if ! sudo -n true 2>/dev/null; then
        print_error "ุชุญุชุงุฌ ุตูุงุญูุงุช sudo"
        exit 1
    fi
    
    print_success "ุงูุตูุงุญูุงุช ุตุญูุญุฉ"
}

# ุชุซุจูุช ุงูุชุจุนูุงุช ุงูุฃุณุงุณูุฉ
install_dependencies() {
    print_status "ุชุญุฏูุซ ุงููุธุงู ูุชุซุจูุช ุงูุชุจุนูุงุช..."
    
    sudo apt update && sudo apt upgrade -y
    
    # ุชุซุจูุช ุงูุญุฒู ุงููุทููุจุฉ
    sudo apt install -y \
        python3 \
        python3-pip \
        python3-venv \
        nginx \
        git \
        curl \
        wget \
        htop \
        ufw \
        sqlite3 \
        build-essential \
        python3-dev
    
    print_success "ุชู ุชุซุจูุช ุงูุชุจุนูุงุช ุจูุฌุงุญ"
}

# ุฅุนุฏุงุฏ Python Environment
setup_python_env() {
    print_status "ุฅุนุฏุงุฏ ุงูุจูุฆุฉ ุงูุงูุชุฑุงุถูุฉ ูู Python..."
    
    # ุฅูุดุงุก ุงูุจูุฆุฉ ุงูุงูุชุฑุงุถูุฉ
    python3 -m venv venv
    
    # ุชูุนูู ุงูุจูุฆุฉ ุงูุงูุชุฑุงุถูุฉ
    source venv/bin/activate
    
    # ุชุญุฏูุซ pip
    pip install --upgrade pip
    
    # ุชุซุจูุช ุงูููุชุจุงุช ุงููุทููุจุฉ
    if [[ -f hosting_requirements.txt ]]; then
        pip install -r hosting_requirements.txt
        print_success "ุชู ุชุซุจูุช ููุชุจุงุช Python"
    else
        print_warning "ูู ูุชู ุงูุนุซูุฑ ุนูู hosting_requirements.txt"
    fi
}

# ุฅุนุฏุงุฏ ููู ุงูุจูุฆุฉ
setup_env_file() {
    print_status "ุฅุนุฏุงุฏ ููู ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ..."
    
    if [[ -f hosting_env_example.txt ]]; then
        cp hosting_env_example.txt .env
        print_success "ุชู ุฅูุดุงุก ููู .env"
        print_warning "ูุฑุฌู ุชุญุฑูุฑ ููู .env ูุฅุถุงูุฉ ุงูุจูุงูุงุช ุงููุทููุจุฉ"
    else
        print_error "ูู ูุชู ุงูุนุซูุฑ ุนูู hosting_env_example.txt"
    fi
}

# ุฅุนุฏุงุฏ ุงููุฌูุฏุงุช
setup_directories() {
    print_status "ุฅูุดุงุก ุงููุฌูุฏุงุช ุงููุทููุจุฉ..."
    
    # ูุฌูุฏ ุงูุงุณุชุถุงูุฉ
    sudo mkdir -p /var/hosting
    sudo chown $USER:$USER /var/hosting
    sudo chmod 755 /var/hosting
    
    # ูุฌูุฏ ุงููุณุฎ ุงูุงุญุชูุงุทูุฉ
    sudo mkdir -p /var/backups/hosting
    sudo chown $USER:$USER /var/backups/hosting
    
    # ูุฌูุฏ ุงูุณุฌูุงุช
    mkdir -p logs
    
    # ูุฌูุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช
    mkdir -p data
    
    print_success "ุชู ุฅูุดุงุก ุงููุฌูุฏุงุช"
}

# ุฅุนุฏุงุฏ Nginx ุงูุฃุณุงุณู
setup_nginx() {
    print_status "ุฅุนุฏุงุฏ Nginx..."
    
    # ุฅูุดุงุก ููู ุฅุนุฏุงุฏ Nginx
    sudo tee /etc/nginx/sites-available/hosting-bot > /dev/null <<EOF
server {
    listen 80 default_server;
    server_name _;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    
    # Proxy headers
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;
    
    # Default location
    location / {
        return 404;
    }
    
    # Health check
    location /health {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
    }
}
EOF
    
    # ุชูุนูู ุงููููุน
    sudo ln -sf /etc/nginx/sites-available/hosting-bot /etc/nginx/sites-enabled/
    
    # ุฅุฒุงูุฉ ุงููููุน ุงูุงูุชุฑุงุถู
    sudo rm -f /etc/nginx/sites-enabled/default
    
    # ูุญุต ุฅุนุฏุงุฏุงุช nginx
    if sudo nginx -t; then
        sudo systemctl restart nginx
        sudo systemctl enable nginx
        print_success "ุชู ุฅุนุฏุงุฏ Nginx ุจูุฌุงุญ"
    else
        print_error "ุฎุทุฃ ูู ุฅุนุฏุงุฏุงุช Nginx"
        exit 1
    fi
}

# ุฅุนุฏุงุฏ Firewall
setup_firewall() {
    print_status "ุฅุนุฏุงุฏ Firewall..."
    
    # ุชูุนูู UFW
    sudo ufw --force enable
    
    # ุงูุณูุงุญ ุจู SSH
    sudo ufw allow ssh
    
    # ุงูุณูุงุญ ุจู HTTP/HTTPS
    sudo ufw allow 80
    sudo ufw allow 443
    
    # ุงูุณูุงุญ ุจูุทุงู ููุงูุฐ ุงููุดุงุฑูุน
    sudo ufw allow 8000:9000/tcp
    
    print_success "ุชู ุฅุนุฏุงุฏ Firewall"
}

# ุฅุนุฏุงุฏ ุฎุฏูุฉ ุงููุธุงู
setup_systemd_service() {
    print_status "ุฅุนุฏุงุฏ ุฎุฏูุฉ ุงููุธุงู..."
    
    CURRENT_DIR=$(pwd)
    USER_NAME=$(whoami)
    
    # ุฅูุดุงุก ููู ุงูุฎุฏูุฉ
    sudo tee /etc/systemd/system/hosting-bot.service > /dev/null <<EOF
[Unit]
Description=Hosting Bot Service
After=network.target nginx.service
Wants=nginx.service

[Service]
Type=simple
User=$USER_NAME
Group=$USER_NAME
WorkingDirectory=$CURRENT_DIR
Environment=PATH=$CURRENT_DIR/venv/bin
ExecStart=$CURRENT_DIR/venv/bin/python hosting_bot.py
Restart=always
RestartSec=3
StandardOutput=journal
StandardError=journal

# Security settings
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$CURRENT_DIR /var/hosting /var/backups/hosting

[Install]
WantedBy=multi-user.target
EOF
    
    # ุฅุนุงุฏุฉ ุชุญููู systemd
    sudo systemctl daemon-reload
    
    # ุชูุนูู ุงูุฎุฏูุฉ
    sudo systemctl enable hosting-bot
    
    print_success "ุชู ุฅุนุฏุงุฏ ุฎุฏูุฉ ุงููุธุงู"
}

# ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช
setup_database() {
    print_status "ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช..."
    
    # ุชุดุบูู ุณูุฑููพุช Python ูุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช
    source venv/bin/activate
    python3 -c "
from hosting_bot import DatabaseManager
import os

# ุชุญุฏูุฏ ูุณุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช
db_path = os.getenv('DATABASE_PATH', 'hosting_bot.db')

# ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช
db = DatabaseManager(db_path)
print('ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ')
"
    
    print_success "ุชู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช"
}

# ุฅูุดุงุก ุณูุฑููพุช ุงููุณุฎ ุงูุงุญุชูุงุทู
create_backup_script() {
    print_status "ุฅูุดุงุก ุณูุฑููพุช ุงููุณุฎ ุงูุงุญุชูุงุทู..."
    
    cat > backup_script.sh << 'EOF'
#!/bin/bash

# ุณูุฑููพุช ุงููุณุฎ ุงูุงุญุชูุงุทู ูุจูุช ุงูุงุณุชุถุงูุฉ

DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/var/backups/hosting"
PROJECT_DIR=$(dirname "$(readlink -f "$0")")

# ุฅูุดุงุก ูุฌูุฏ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ
mkdir -p "$BACKUP_DIR"

# ูุณุฎ ุงุญุชูุงุทูุฉ ููุงุนุฏุฉ ุงูุจูุงูุงุช
echo "ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ููุงุนุฏุฉ ุงูุจูุงูุงุช..."
sqlite3 "$PROJECT_DIR/hosting_bot.db" ".backup $BACKUP_DIR/db_backup_$DATE.db"

# ูุณุฎ ุงุญุชูุงุทูุฉ ูููุดุงุฑูุน
echo "ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ูููุดุงุฑูุน..."
tar -czf "$BACKUP_DIR/projects_backup_$DATE.tar.gz" -C /var/hosting .

# ูุณุฎ ุงุญุชูุงุทูุฉ ูุฅุนุฏุงุฏุงุช ุงูุจูุช
echo "ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ููุฅุนุฏุงุฏุงุช..."
tar -czf "$BACKUP_DIR/config_backup_$DATE.tar.gz" -C "$PROJECT_DIR" .env hosting_bot.py

# ุญุฐู ุงููุณุฎ ุงูุงุญุชูุงุทูุฉ ุงููุฏููุฉ (ุฃูุซุฑ ูู 30 ููู)
find "$BACKUP_DIR" -name "*backup*" -mtime +30 -delete

echo "ุชู ุฅูุดุงุก ุงููุณุฎ ุงูุงุญุชูุงุทูุฉ ุจูุฌุงุญ ูู $BACKUP_DIR"
EOF
    
    chmod +x backup_script.sh
    
    # ุฅุถุงูุฉ ูููุฉ cron ูููุณุฎ ุงูุงุญุชูุงุทู ุงููููู
    (crontab -l 2>/dev/null; echo "0 2 * * * $(pwd)/backup_script.sh") | crontab -
    
    print_success "ุชู ุฅูุดุงุก ุณูุฑููพุช ุงููุณุฎ ุงูุงุญุชูุงุทู"
}

# ูุญุต ุงูุชุซุจูุช
verify_installation() {
    print_status "ูุญุต ุงูุชุซุจูุช..."
    
    # ูุญุต Python
    if source venv/bin/activate && python3 -c "import telebot, sqlite3, psutil"; then
        print_success "ููุชุจุงุช Python ูุชุงุญุฉ"
    else
        print_error "ูุดููุฉ ูู ููุชุจุงุช Python"
        return 1
    fi
    
    # ูุญุต Nginx
    if sudo systemctl is-active --quiet nginx; then
        print_success "Nginx ูุนูู ุจุดูู ุตุญูุญ"
    else
        print_error "ูุดููุฉ ูู Nginx"
        return 1
    fi
    
    # ูุญุต ููู .env
    if [[ -f .env ]]; then
        print_success "ููู .env ููุฌูุฏ"
    else
        print_warning "ููู .env ุบูุฑ ููุฌูุฏ - ุชุญุชุงุฌ ูุฅูุดุงุฆู"
    fi
    
    # ูุญุต ุงููุฌูุฏุงุช
    if [[ -d /var/hosting ]]; then
        print_success "ูุฌูุฏ ุงูุงุณุชุถุงูุฉ ุฌุงูุฒ"
    else
        print_error "ูุฌูุฏ ุงูุงุณุชุถุงูุฉ ุบูุฑ ููุฌูุฏ"
        return 1
    fi
    
    print_success "ุงูุชุญูู ูู ุงูุชุซุจูุช ุงูุชูู ุจูุฌุงุญ"
}

# ุนุฑุถ ุงูุฎุทูุงุช ุงูุชุงููุฉ
show_next_steps() {
    cat << EOF

${GREEN}๐ ุชู ุงูุฅุนุฏุงุฏ ุจูุฌุงุญ! ๐${NC}

${YELLOW}ุงูุฎุทูุงุช ุงูุชุงููุฉ:${NC}

1. ${BLUE}ุชุญุฑูุฑ ููู ุงูุฅุนุฏุงุฏุงุช:${NC}
   nano .env
   
   ${YELLOW}ูุฌุจ ุชุนุฏูู ูุฐู ุงููุชุบูุฑุงุช:${NC}
   - BOT_TOKEN (ูู @BotFather)
   - ADMIN_IDS (ูุนุฑู ุงููุดุฑู)
   - SERVER_IP (ุนููุงู IP ููุฎุงุฏู)

2. ${BLUE}ุชุดุบูู ุงูุจูุช:${NC}
   sudo systemctl start hosting-bot
   
3. ${BLUE}ูุฑุงูุจุฉ ุงูุณุฌูุงุช:${NC}
   sudo journalctl -u hosting-bot -f
   
4. ${BLUE}ูุญุต ุญุงูุฉ ุงูุฎุฏูุฉ:${NC}
   sudo systemctl status hosting-bot

${YELLOW}ุฃูุงูุฑ ูููุฏุฉ:${NC}

- ${BLUE}ุฅููุงู ุงูุจูุช:${NC} sudo systemctl stop hosting-bot
- ${BLUE}ุฅุนุงุฏุฉ ุชุดุบูู:${NC} sudo systemctl restart hosting-bot
- ${BLUE}ูุญุต Nginx:${NC} sudo nginx -t
- ${BLUE}ูุณุฎุฉ ุงุญุชูุงุทูุฉ:${NC} ./backup_script.sh

${GREEN}ูุฑุญุจุงู ุจู ูู ูุธุงู ุงูุงุณุชุถุงูุฉ ุงููุชูุฏู! ๐${NC}

EOF
}

# ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ
main() {
    echo -e "${BLUE}"
    cat << "EOF"
    โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
    โ     ๐ ุจูุช ุงูุงุณุชุถุงูุฉ ุงููุชูุฏู ๐      โ
    โ           Hosting Bot Setup           โ
    โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
EOF
    echo -e "${NC}"
    
    print_status "ุจุฏุก ุนูููุฉ ุงูุฅุนุฏุงุฏ..."
    
    # ูุญุต ุงููุธุงู ูุงูุตูุงุญูุงุช
    check_system
    check_permissions
    
    # ุชุซุจูุช ูุฅุนุฏุงุฏ ุงูููููุงุช
    install_dependencies
    setup_directories
    setup_python_env
    setup_env_file
    setup_nginx
    setup_firewall
    setup_systemd_service
    setup_database
    create_backup_script
    
    # ูุญุต ุงูุชุซุจูุช
    if verify_installation; then
        show_next_steps
    else
        print_error "ูุดู ูู ุงูุชุญูู ูู ุงูุชุซุจูุช"
        exit 1
    fi
}

# ุชุดุบูู ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ
main "$@"